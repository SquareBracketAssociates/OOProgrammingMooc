{
  "title":"Understanding Mistakes",
    "slidesid" : "W2S09"
}

${slide:title=What You Will Learn}$

Find and fix common mistakes faster

${slide:title=A Problem}$

[[[
| anArray |
anArray := Array new: 3
anArray at: 1 put: true.
anArray at: 2 put: false.
anArray
]]]

- An instance of SmallInteger did not understand ==anArray==

+>file://figures/smallDNU.png|width=90+

${slide:title=Missing Period}$

[[[
| anArray |
anArray := Array new: 3.
anArray at: 1 put: true.
anArray at: 2 put: false.
anArray
]]]


${slide:title=A Problem}$

[[[
| aStream |
aStream := String new: 100 writeStream.
aStream
   nextPutAll: 'Today, ';
   nextPutAll: Date today printString;
   contents
]]]

- An instance of SmallInteger did not understand ==writeStream==

${slide:title=Missing Parenthesis}$

[[[
| aStream |
aStream := (String new: 100) writeStream.
aStream
   nextPutAll: 'Today, ';
   nextPutAll: Date today printString;
   contents
]]]

${slide:title=A Problem}$

[[[
CounterTest >> testCountIsSetAndRead 
	|c|
	c := Counter new.
	c count: 7.
	c assert: c count = 7
]]]

- An instance of Counter did not understand ==assert:==

${slide:title=Assert: is a testcase message}$

[[[
CounterTest >> testCountIsSetAndRead 
	|c|
	c := Counter new.
	c count: 7.
	self assert: c count = 7
]]]




${slide:title=A Problem}$

[[[
CounterTest >> testIncrement |c|
	c := Counter new.
	c count: 0 ; increment; increment.
	self assert: self count = 2
]]]

- An instance of CounterTest did not understand ==count==


${slide:title=Identify the object under test API}$

[[[
CounterTest >> testIncrement |c|
	c := Counter new.
	c count: 0 ; increment; increment.
	self assert: self count = 2
]]]

- An instance of CounterTest did not understand ==count==


${slide:title=A Problem}$

[[[
item := GameItem new
			title: 'Final Fantasy XII';
			hasDocumentation: True.
]]]


${slide:title=True vs. true}$

[[[
item := GameItem new
			title: 'Final Fantasy XII';
			hasDocumentation: true.
]]]

- ==True== is the class ==True==
- ==true== is an instance of the class ==True==


${slide:title=A Problem}$

[[[
MyExampleSetTest >> testAddTwice 
   |s|
   s := Set new.
   self assert: s isEmpty.
   s add: $A.
   (self assert: s size) equals: 1.
   s add: $A.
   (self assert: s size) equals: 1.
]]]


${slide:title=Assert:equals: is a message}$

[[[
MyExampleSetTest >> testAddTwice 
   |s|
   s := Set new.
   self assert: s isEmpty.
   s add: $A.
   self assert: s size equals: 1.
   s add: $A.
   self assert: s size equals: 1.
]]]

- ==assert:equals:==  is a message with two arguments:
-- the actual value
-- the expected value

${slide:title=Check the argument of a message}$

Often we pass wrong information as argument

[[[
testRemoveFrom
	| item |
	collector := GameCollector smallCollection.
	item := (collector collectionNamed: #owned) anyOne.
	collector remove: item from: #owned.
	self assert: (collector collectionNamed: #owned size) equals: 1
]]]

${slide:title=Use the debugger to look at the argument}$

+>file://figures/WrongArg.png|width=70+

${slide:title=A problem}$

[[[
TemperatureLogger >> average
   | sum |
   sum := 0.
   measures do: [ :aMeasure | sum := sum + aMeasure ].
   sum / measures size
]]]

${slide:title=Missing return}$

[[[
TemperatureLogger >> average
   | sum |
   sum := 0.
   measures do: [ :aMeasure | sum := sum + aMeasure ].
   ^ sum / measures size
]]]


${slide:title=What happened?}$

Bty default a method always returns the receiver ==self==
[[[
TemperatureLogger >> average
   | sum |
   sum := 0.
   measures do: [ :aMeasure | sum := sum + aMeasure ].
   sum / measures size
]]]

is equivalent to 
[[[
	
TemperatureLogger >> average
   | sum |
   sum := 0.
   measures do: [ :aMeasure | sum := sum + aMeasure ].
   sum / measures size.
   ^ self
]]]

${slide:title=What You Should Know}$

- How to identify common errors faster
- Check periods ==.==
- Check parentheses ==(== and ==)==
- Check carets ==^==
- Use the debugger to understand the problem

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week5/C019-W5S03-LearningFromMistake.pillar"
% End:
