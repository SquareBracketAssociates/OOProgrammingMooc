{
    "title":"About Testing",
    "slidesid":"W4S06"
}

${slide:title=Goal of the Lecture}$

- Why tests are important?
- What are their advantages?
- What are the techniques to write good tests?

${slide:title=Pros}$

- Specifying expected behavior and results
- Finding problems
- Understanding code
- Increase trust

${slide:title=Finding Problems: Pros}$

- Find bugs when they appear
- Improve customer trust
- Reproduce complex scenari
- Check contracts of super types
- Guarantee old bugs won't come back
- Isolate the problem

${slide:title=Finding Problems: Characteristics of a Good Test Suite}$

- Check extreme cases (e.g., null, 0 and empty)
- Check complex cases (e.g., exceptions, network pbs)
- 1 test for each bug (at least)
- Good coverage
- Check abstractions
- Check units independently

${slide:title=Understanding Code}$

[[[
convert
   | s |
   s := '#000000' copy.
   s at: 2 put: (Character digitValue: ((rgb bitShift: -6 - RedShift) bitAnd: 15)).
   s at: 3 put: (Character digitValue: ((rgb bitShift: -2 - RedShift) bitAnd: 15)).
   s at: 4 put: (Character digitValue: ((rgb bitShift: -6 - GreenShift) bitAnd: 15)).
   s at: 5 put: (Character digitValue: ((rgb bitShift: -2 - GreenShift) bitAnd: 15)).
   s at: 6 put: (Character digitValue: ((rgb bitShift: -6 - BlueShift) bitAnd: 15)).
   s at: 7 put: (Character digitValue: ((rgb bitShift: -2 - BlueShift) bitAnd: 15)).
   ^ s
]]]

${slide:title=Understanding Code}$

[[[
testConvert
   self assert: Color white convert = '#FFFFFF'.
   self assert: Color red convert = '#FF0000'.
   self assert: Color black convert = '#000000'
]]]

${slide:title=Understanding Code}$

[[[
testConvert2
   | table aColorString |
   table := #('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F').

   table do: [ :each |
      aColorString := '#', each, each, '0000'.
      self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].

   table do: [ :each |
      aColorString := '#', '00', each, each, '00'.
      self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].

   table do: [ :each |
      aColorString := '#', '0000', each, each.
      self assert: ((Color fromString: aColorString) convert sameAs: aColorString)].
]]]

${slide:title=Understanding Code}$

[[[
testBitShift
   self assert: (2r11 bitShift: 2) equals: 2r1100.
   self assert: (2r1011 bitShift: -2) equals: 2r10.

testShiftOneLeftThenRight
   "Shift 1 bit left then right and test for 1"
   1 to: 100 do: [:i | self assert: ((1 bitShift: i) bitShift: i negated) = 1].
]]]

${slide:title=Understanding Code: Pros}$

- Give simple and reproducible examples
- Explain an API
- Give up-to-date documentation
- Check conformity of new code
- Offer a first client to new code
- Force a modular design

${slide:title=Understanding Code: Characteristics of a Good Test Suite}$

- Deterministic
- Automatic
- Self-explained
- Simple
- Unit

${slide:title=Increasing Trust: Pros}$

- Accelerate bug detection
- Accelerate new code checking
- Ease refactorings
- Prevent regressions

${slide:title=Increasing Trust: Characteristics of a Good Test Suite}$

- Change less frequently than the rest
- Good code coverage
- Deterministic

${slide:title=Collateral Pros}$

- Improve feeling of customers who care
- Allow for automatic bug fixing
- Improve type inference
- Provide examples to variable values

${slide:title=Testing Abstractions}$

How do you test contracts of abstract types?

${slide:title=Testing Abstractions}$

How do you test that one and only one state is active at any time?

+file://figures/tests-actions.png|width=50+

${slide:title=Testing Abstractions}$

+file://figures/tests-actions-abstract-classes.png|width=70+

[[[
testOnlyOneValidStateAtEachMoment
   | action |
   action := self createAction.
   self assert: action isReady.
   self deny: action isInProgress. self deny: action isFinished.

   [ action isFinished ] whileFalse: [
      action doStep.
      self deny: action isReady.
      self assert: action isFinished = action isInProgress not ].

   self deny: action isReady. self deny: action isInProgress.
   self assert: action isFinished
]]]

${slide:title=Testing Abstractions}$

- Parallel hierarchies
- Test must be in the highest abstraction
- Factory method

+file://figures/tests-actions-parallel-hierarchies.png|width=80+

${slide:title=Mocking}$

How do you test that a questionnaire only accepts compatible answers from the user?

+file://figures/tests-questionnaire-model.png|width=100+

${slide:title=Mocking}$

How do you test that a questionnaire only accepts compatible answers from the user?

+file://figures/tests-questionnaire-mocks.png|width=100+

${slide:title=Mocking}$

+file://figures/tests-questionnaire-mocks.png|width=60+

[[[
readAnswerAsLongAsItIsNotCompatible
   | nbRejectsBeforeAccept question ui |
   nbRejectsBeforeAccept := 3.
   question := MockQuestion new nbRejects: nbRejectsBeforeAccept.
   ui := MockQuestionnaireUI new.
   self assert: ui nbReadAnswers equals: 0.
   self assert: question nbAcceptAnswerCalls equals: 0.
   questionnaire runQuestion: question on: ui.
   self assert: ui nbReadAnswers equals: nbRejectsBeforeAccept + 1.
   self assert: question nbAcceptAnswerCalls equals: nbRejectsBeforeAccept + 1.
]]]

${slide:title=Mocking}$

+file://figures/tests-questionnaire-mocks.png|width=100+

- Mocks are reusable across tests
- Mocks can be generated with mocking frameworks

${slide:title=Different Testing Levels}$

+file://figures/tests-pyramid.png|width=60+

*http://martinfowler.com/bliki/TestPyramid.html*
