{
  "title":"Inheritance Basics",
  "pharomoocslidesid" : "Pharo Mooc W4S01",
  "slidesid" : "W5S01"
}

${slide:title=Goal}$

- What is inheritance?
- When to use it?

${slide:title=Inheritance In a Nutshell}$

- Remember: A class defines the behavior of all its instances
- With inheritance: A class can extend/reuse/refine the state/behavior of another class 
- When a class inherits from a another one (superclass):
-- its instances can execute methods of the superclass
-- its instances have the state of the superclass in addition to the ones of the superclass

${slide:title=Pharo, Java and others}$

Pharo treats inheritance the same way as Java/C\#:
- Single inheritance between classes
- Static inheritnance instance variables (at compile-time)
- Dynamic for methods (at runtime)

${slide:title=The Basics}$

${columns}$

${column:width=60}$

- Often we want small adaptations
- We want to extend existing behavior and state
- Solution: ""class inheritance""
- A class extends the definition of its superclass with new state and/or behavior

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=Possible Actions while Inheriting}$

${columns}$

${column:width=60}$

A subclass
- can add specific state and behavior:
-- ==color==, ==borderColor==, ...
- can use superclass behavior and state
- can specialize and redefine superclass behavior
-- ==area== (i.e., can take into border)

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$


${slide:title=Adding State and Behavior}$

${columns}$

${column:width=60}$

A subclass can add specific state and behavior:
-- ==color==, ==borderColor==, ...

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$


${slide:title=Use Superclass Behavior}$

${columns}$

${column:width=60}$

A subclass can use superclass behavior and state
- saving a ColoredRectangle will use methods of the superclass to get information

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=Specialising Superclass Behavior}$

${columns}$

${column:width=60}$

A subclass can specialize and redefine superclass behavior
- ==area== (i.e., can take into border)
- the method ==ColoredRectangle >> area== specialise the method ==Rectangle>>area==

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$



${slide:title=Root of Inheritance Hierarchy}$

${columns}$

${column:width=70}$

- ==Object== is the root of most classes
- ==ProtoObject== (==Object=='s superclass) is for special purposes (like raising a many as errors as possible)...
-- ...but we will ignore it as it is not important

${column:width=30}$

+>file://figures/InheritanceDiagram-from-Object.png|width=100+

${endColumns}$

${slide:title=The Basics}$

Inheritance is
- Static for state (i.e., during class creation)
- Dynamic for behavior (i.e., during execution)

${slide:title=Inheritance of Instance Variables}$

${columns}$

${column:width=65}$

- Happens during class definition compilation
- computed from
-- the class own instance variables
-- the ones of its superclasses
- ==ColoredRectangle== instances will be characterized by ==width==, ==height==, ==color==, ==borderColor== instance variables
${column:width=35}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=Inheritance of Behavior}$

${columns}$

${column:width=50}$

- Happens at runtime
- Depends on the receiver of the message
- The method is searched
-- starting from the receiver's class
-- then when not found going to the superclass

${column:width=50}$

+>file://figures/InheritanceDiagram-lookup-withBlank.png|width=80+

${endColumns}$


${slide:title=Inheritance of Behavior}$

${columns}$

${column:width=50}$

- Happens at runtime
- Depends on the receiver of the message
- The method is searched
-- starting from the receiver's class
-- then when not found going to the superclass
(we will explain more in the next lectures)

${column:width=50}$

+>file://figures/InheritanceDiagram-lookup-superclass.png|width=70+

${endColumns}$


${slide:title=Resources}$

- Pharo mooc - Videos W4S01: *http://mooc.pharo.org* 
- Pharo by Example: *http://books.pharo.org*


${slide:title=What You Should Know}$

- Inheritance allows a class to refine state and behavior
- A class has 1 and only 1 superclass
- A class eventually inherits from ==Object==
- Inheritance of state is static (happens at class compile time)
- Inheritance of behavior is dynamic  (happens at message execution)

