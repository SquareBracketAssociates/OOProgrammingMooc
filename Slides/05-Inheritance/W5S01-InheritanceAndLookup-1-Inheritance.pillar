{
  "title":"Inheritance Basics",
  "slidesid" : "Mooc - W4S01"
}

${slide:title=Goal}$

- What is inheritance?
- When to use it?

Pharo treats inheritance the same way as Java:
- Single inheritance
- Static instance variables
- Dynamic for methods

${slide:title=The Basics}$

${columns}$

${column:width=60}$

- Often we want small adaptations
- We want to extend existing behavior and state
- Solution: ""class inheritance""
- A class extends the definition of its superclass with new state and/or behavior

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=The Basics}$

${columns}$

${column:width=60}$

A subclass
- can add specific state and behavior:
-- ==color==, ==borderColor==, ...
- can use superclass behavior and state
- can specialize and redefine superclass behavior
-- ==area== (i.e., can take into border)

${column:width=40}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=Root of Inheritance Hierarchy}$

${columns}$

${column:width=70}$

- ==Object== is the root of most classes
- ==ProtoObject== (==Object=='s superclass) is for special purposes...
-- ...but we will ignore it as it is not important

${column:width=30}$

+>file://figures/InheritanceDiagram-from-Object.png|width=100+

${endColumns}$

${slide:title=The Basics}$

Inheritance is
- Static for state (i.e., during class creation)
- Dynamic for behavior (i.e., during execution)

${slide:title=Inheritance of Instance Variables}$

${columns}$

${column:width=65}$

- Happens during class definition
- computed from
-- the class own instance variables
-- the ones of its superclasses
- ==ColoredRectangle== instances will be characterized by width, height, color, borderColor instance variables 
${column:width=35}$

+>file://figures/InheritanceDiagram.png|width=100+

${endColumns}$

${slide:title=Inheritance of Behavior}$

${columns}$

${column:width=50}$

- Happens at runtime
- Depends on the receiver of the message
- The method is searched
-- starting from the receiver's class
-- then going to the superclass

${column:width=50}$

+>file://figures/InheritanceDiagram-lookup-withBlank.png|width=80+

${endColumns}$


${slide:title=Inheritance of Behavior}$

${columns}$

${column:width=50}$

- Happens at runtime
- Depends on the receiver of the message
- The method is searched
-- starting from the receiver's class
-- then going to the superclass
(we will explain more in the next lectures)

${column:width=50}$

+>file://figures/InheritanceDiagram-lookup-superclass.png|width=70+

${endColumns}$

${slide:title=What You Should Know}$

- Inheritance allows a class to refine state and behavior
- A class has 1 and only 1 superclass
- A class eventually inherits from ==Object==
- Inheritance of state is static (happens at class compile time)
- Inheritance of behavior is dynamic  (happens at message execution)

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to='Beamer' Slides/Week4/C019-W4S01-InheritanceAndLookup-1-Inheritance.pillar"
% End:
