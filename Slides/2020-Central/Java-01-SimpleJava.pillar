{
	"title":"Key OO concepts in Java",
	"slidesid":"",
	"author":"S. Ducasse"
}


${slide:title=Objectives}$

- Illustrate key OO concepts
- In Java but limited as much as possible to the essential points


Thanks Alexandre Bergel for parts of the materials used in this lecture!

${slide:title=Quotes of the day}$

"Perfection is attained, not when no more can be added, but when no more can be removed." Antoine de Saint-Exup√©ry

"I invented the term 'Object-Oriented', and I can tell you I did not have C\+\+ in mind." Alan Kay
(nor Java :))


${slide:title=What we will not cover}$

Simple Java is an oxymoron.

- Java is gigantic and even more... (looks more and more like an old verbose language)
- Full of conceptual glitches (public fields, strange protected semantics, overloading...)
- Java mixes physical representation (files) with concepts 
-- there is not need to have files to have classes
-- class definitions can be saved in databases

This lecture will not cover: packaging  enums, lambdas, generics, inner classes, modules, private methods, visibility, synchronised, meta data, overloading, primitives vs. boxed....
- But we will provide extras slides on more advanced topics

${slide:title=Java}$

Not pure object-oriented programming language
- Static methods are not looked up
- Primitive types are not objects: int and Integer....
- Classes are not first class: cannot send messages to classes

${slide:title=Outline}$

- Instances, instance creation
- Classes / instance variables
- Methods
- Inheritance (single)
- Interface
- Cast
- Dynamic type vs. static types 
- Constructor


${slide:title=Instances}$

- Created using ==new== construct
- Remember: one state, identity, behavior

[[[
new Tomagotchi()
]]]

Often 
[[[
Tomagotchi t = new Tomagotchi()
]]]


${slide:title=Class}$

- Mold/Generators of instances

[[[
public class Rectangle
	{
	    protected int length;
	    protected int width;
		...
]]]

[[[
public class Box extends Rectangle {
	    protected int height;
}
]]]

${slide:title=Class}$

- One public class per file
- File name should have the name of the public class
- Class import packages (group of classes)


${slide:title=Instance variables}$

- Describe instance structure
- Have a visibility: Avoid public, private and final :)
- Better use protected (see companion extra lectures)

[[[
public class Rectangle {
	    protected int length;
	    protected int width;
		...
]]]

- Accessible by method of the class and subclasses

${slide:title=Methods}$

- ==this== represents the receiver
- the lookup of methods at runtime starts in the class of the receiver.

[[[
public class Rectangle{	
	protected int length;
	protected int width;
	
	public int getArea() {
		return length * width;
	}
]]]

${slide:title=Constructor (I)}$

- A Constructor is a static function, it is not a method!
- Responsible to properly initialize an object 
- ==<class>()== is a default constructor

[[[
	public Rectangle() {
       length = 0;
       width = 0;
    }
]]]

Multiple constructors in a class

[[[
    public Rectangle(int length, int width) {
        this.length = length;
        this.width = width;
    }
]]]


${slide:title=What you should know}$

- Class/Instances
- Methods
- Constructors = functions