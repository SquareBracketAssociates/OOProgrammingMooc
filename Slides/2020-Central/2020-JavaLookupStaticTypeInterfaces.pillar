{
	"title":"About Types and Lookup",
	"slidesid":"",
	"author":"S. Ducasse"
}

${slide:title=Remember: Static vs. Dynamic Types}$

[[[
A a = new B();
]]]

- The static type of variable ==a== is ==A==  i.e., the statically declared class to which it belongs.
-- The static type never changes.

- The dynamic type of ==a== is ==B==  i.e., the class of the object currently bound to a.
-- The dynamic type may change throughout the program.


${slide:title=Setting the stage}$

[[[
public interface Acceptable {
    public void accept();
}
]]]

[[[
public class Person implements Acceptable {
    public void accept(){
        System.out.println("accept");
    }
    public void agree(){
        System.out.println("agree");
    }
}
]]]

${slide:title=Normal}$

[[[
Person p = new Person();
p.accept();
p.agree();
]]]

[[[
accept
agree
]]]


${slide:title=Normal too}$

[[[
Person p = new Person();
Acceptable r = p;
r.accept;
]]]

[[[
accept
]]]

${slide:title=Influence of static type}$

[[[
Person p = new Person();
Acceptable r = p;
r.agree();
]]]

[[[
java: cannot find symbol
  symbol:   method agree()
  location: variable a of type designCorner.Acceptable
]]]

- At compile time, the typechecker does not use the dynamic type of the object.
- Within the static type Acceptable there is no method ==agree()==.
- A typechecker can reject programs that would execute without problems to make sure that it can find execution that would fail.
- An interface provide a view on the object behavior


${slide:title=Nominal Typing and Typecheking}$

- Nominal = name
- The type checker look for name of the Type and not inside the API
- The type checker has a static view of the world. 

Even if your class implements the exact same interface
- If you do not have a type relationship between your classes, they are incompatible
- This is true for classes and interfaces



${slide:title=What you should know}$

- Static types are used to identify at compile time which methods to lookup
- Lookup will look for such method at runtime  