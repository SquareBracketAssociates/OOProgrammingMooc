{
    "title":"Common Errors",
    "slidesid" : "W4S05",
    "pharomoocslidesid" : "W5S03"
}

${slide:title=What You Will Learn}$

Find and fix common mistakes faster!

${slide:title=Problem: aDie does not understand self}$

[[[
DieHandle >> + aDieHandle
   | res |
   res := DieHandle new
   self dices do: [ :each | ... ].
]]]

+>file://figures/DebugSelf2-cut.png|width=90+

${slide:title=Missing Period}$

[[[
DieHandle >> + aDieHandle
   | res |
   res := DieHandle new.
   self dices do: [ :each | ... ].
]]]

- Separate instructions with period (==.==)

${slide:title=Problem: Message includes:ifTrue: does not exist}$

[[[
x includes: 33
   ifTrue: [ self do something ]
]]]

""Error:"" Message ==includes:ifTrue:== does not exist

${slide:title=Solution: Disambiguate Messages Using Parenthesis}$

[[[
(x includes: 33)
   ifTrue: [ self do something ]
]]]

${slide:title=Problem: Message assert:includes: does not exist}$

[[[
self assert: players includes: aPlayer
]]]

""Error:"" Message ==assert:includes:== does not exist

${slide:title=Keyword-Based Messages}$

Solution
[[[
self assert: (players includes: aPlayer)
]]]

- Keyword-based messages are built out of fragments
- The message is the longuest sequence of fragments
- Use parentheses to delimit multiple keyword messages

${slide:title=Problem: Got an element insted of the collection}$

[[[
numbers := OrderedCollection new
             add: 35
]]]

""Error:"" ==numbers== is the number 35 and not a collection



${slide:title=Forgotten yourself}$

[[[
numbers := OrderedCollection new
             add: 35;
             yourself
]]]

is equivalent to

[[[
| numbers |
numbers := OrderedCollection new.
numbers add: 35.
numbers
]]]


${slide:title=Problem: Got 6 instead a Die}$

[[[
Die >> setFaces: aNumber
   faces := aNumber

Die class >> new
   ^ super new setFaces: 6
]]]

""Error:"" ==Die new== returns 6 instead of a dice

${slide:title=Access the receiver of the message with yourself}$

[[[
Die class >> new
   ^ super new setFaces: 6; yourself
]]]

- ==add:== and ==setFaces:== return their argument, not the receiver
- Send ==yourself== after a sequence of messages if you want the receiver

${slide:title=Problem: nil does not understand ifFalse:}$

[[[
Book >> borrow
   inLibrary ifFalse: [ ... ].
   ...
]]]

""Error:"" ==nil== does not understand ==ifFalse:==

${slide:title=Solution: initialize your objects!}$

[[[
Book >> initialize
   inLibrary := false
   ...
]]]


${slide:title=Problem: Booleans vs. Boolean classes}$

[[[
Book >> initialize
   inLibrary := True
]]]

[[[
Book >> borrow
   inLibrary ifFalse: [ ... ].
  ...
]]]

""Error:"" Class ==True== does not understand ==ifFalse:==

${slide:title=True vs. true}$

Solution
[[[
Book >> initialize
   inLibrary := true
]]]

- ==nil== is the unique instance of the class ==UndefinedObject==
- ==true== is the unique instance of the class ==True==
- Class names start with an uppercase letter

${slide:title=Problem returns aDie instead of a number}$

[[[
Die >> roll
   faces atRandom
]]]

""Error:"" ==aDie roll== returns ==aDie== instead of a number

${slide:title=Problem Analysis}$

[[[
Die >> roll
   faces atRandom
]]]

is equivalent to

[[[
Die >> roll
   faces atRandom.
   ^ self
]]]


${slide:title=Do not forget to return result}$

[[[
Die >> roll
   ^ faces atRandom
]]]



${slide:title=A Problem}$

[[[
Die class >> new
   super new
      setFaces: 0;
      yourself
]]]

""Error:"" ==Die new== returns the class instead of the new instance

${slide:title=Problem Analysis}$

[[[
Die class >> new
   super new
      setFaces: 0;
      yourself
]]]

is equivalent to

[[[
Die class >> new
   super new
      setFaces: 0;
      yourself.
   ^ self
]]]

- ==new== is sent to a class
- ==self== is the class ==Die==
- returns ==Die== and not its newly created instance

${slide:title=Forgetting to Return the Result}$

[[[
Die class >> new
   ^ super new
      setFaces: 0;
      yourself
]]]

- in a method, ==self== is returned by default
- do not forget the caret ==^== to return something else

${slide:title=A Problem}$

[[[
Die class >> new
   ^ self new
      setFaces: 0;
      yourself
]]]

""Error:"" System is frozen

${slide:title=Infinite Loops in Overridden Methods}$

Solution
[[[
Die class >> new
   ^ super new
      setFaces: 0;
      yourself
]]]

- use ==super== in overridden methods





${slide:title=What You Should Know}$

- How to identify common errors faster
- Check periods ==.==
- Check parentheses ==(== and ==)==
- Check carets ==^==
- Check ==yourself==
- Use the debugger to understand the problem

${slide:title=Resources}$

- Pharo mooc - Videos W5S03: *http://mooc.pharo.org* 
- Pharo by Example: *http://books.pharo.org*