{
	"title":"First Look at Class and Method Definitions",
	"slidesid":"W1S10",
	"pharomoocslidesid":"W1S06"
}

${slide:title=Class and Method Definitions in Pharo}$

- We will have specific lectures on classes and methods.
- Now this is just to give you a first impression

- Most of the time you will define classes and methods using tools
- There is no dedicated syntax for class definition just a message

${slide:title=Class Definition in Pharo}$

+>file://figures/PointClass.png|width=98+

${slide:title=Class Definition is a Message}$

[[[
Object subclass: #Point
  instanceVariableNames: 'x y'
  classVariableNames: ''
  package: 'Graphics'
]]]

We send the message ==subclass:inst....== to the superclass to create the class

${slide:title=Method Definition in Pharo}$

+>file://figures/FactorialInBrowser.png|width=98+

${slide:title=Method Definition in Pharo}$

[[[
factorial
    "Answer the factorial of the receiver."
    self = 0 ifTrue: [ ^ 1 ].
    self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
    self error: 'Not valid for negative integers'
]]]

In which class is ==factorial== defined?

${slide:title=Presentation Convention}$

In this lecture, a method will be displayed as

[[[
Integer >> factorial
    "Answer the factorial of the receiver."
    self = 0 ifTrue: [ ^ 1 ].
    self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
    self error: 'Not valid for negative integers'
]]]

- ""Integer >>"" is not part of the syntax
-- it tells you the method's class

${slide:title=Presentation Convention}$

+>file://figures/FactorialInBrowser.png|width=80+

In Pharo, the method belongs to the selected class.

${slide:title=Remember Messages}$

[[[
Integer >> factorial
    "Answer the factorial of the receiver."

    self = 0 ifTrue: [ ^ 1 ].
    self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
    self error: 'Not valid for negative integers'
]]]

- ==factorial== is the method name
- ==\===, ==>==, ==\*== and ==-== are binary messages
- ==factorial== is an unary message
- ==ifTrue:== and ==error:== are keyword messages
- the caret ==^== is for returning a value


${slide:title=A Method Returns self by Default}$

[[[
Game >> initializePlayers
    self players
      at: 'tileAction'
      put: ( MITileAction director: self )
]]]

is equivalent to

[[[
Game >> initializePlayers
    self players
      at: 'tileAction'
      put: ( MITileAction director: self ).
    ^ self       "<-- optional"
]]]

${slide:title=Class Methods}$

${columns}$

${column:width=60}$

+>file://figures/Point-xy-class-method.png|width=90+

${column:width=40}$

- press the button ==class== to define a class method
- in lectures, we add ==class==

${endColumns}$

[[[
Point class >> x: xInteger y: yInteger 
    "Answer an instance of me with coordinates xInteger and yInteger."

    ^ self basicNew setX: xInteger setY: yInteger
]]]




${slide:title=What You Should Know}$

- A class is defined by sending a message to its superclass 
- Classes are defined inside packages
- Methods are public
- By default a method returns the receiver, ==self==
- Class methods are just methods of the class side

${slide:title=Resources}$

- Pharo Mooc - W1S06 Videos
- Pharo by Example *http://books.pharo.org*
