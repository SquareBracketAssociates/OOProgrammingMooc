{
  "title":"Learning how to discover information",
  "slidesid" : "W3S06"
}

${slide:title=Looking for implementors}$

- Look for possible implementations
- You will get methods and may be one that you can call on (sub)-instances of the class implementing it.

${slide:title=Looking for implementors}$

- Command-m (for iMpleMentors)
+>file://Slides/figures/ImplementorsLowercase.png|width=90+

${slide:title=Looking for implementors (Spotter)}$

-  Shift-Enter hex #im (all methods whose selectors contains ...)
+>file://Slides/figures/SpotterLowercase.png|width=90+

${slide:title=Looking for senders}$
- Look how a given message is used
- Always interesting to understand typical arguments to be passed


${slide:title=Looking for senders}$
- Command-n (for seNders)
There is no senders of lowercase

${slide:title=Looking for senders (Spotter)}$

- Shit-Enter asLowercase #se
+>file://Slides/figures/SpotterSendersAslowercase.png|width=90+



${slide:title=Looking for class references}$

+>file://Slides/figures/PointClassReferences.png|width=90+

${slide:title=Example: copyWithoutAll: implementors}$

+>file://Slides/figures/copyWithoutAllImplementors.png|width=90+

${slide:title=Example: copyWithoutAll: senders}$

+>file://Slides/figures/copyWithoutAllSenders.png|width=90+

${slide:title=Looking for hex}$

[[[
testCopyEmptyWithoutAll
	"self debug: #testCopyEmptyWithoutAll"
	| res |
	res := self empty copyWithoutAll: self collectionWithElementsToRemove.
	self assert: res size = self empty size.
	self collectionWithElementsToRemove do: [ :each | self deny: (res includes: each) ]
]]]

${slide:title=Grabing instances and asking them}$

Too often we try to imagine objects
- Grab one as early as possible and 
- Send message to this object
- Inspect it, talk to it


${slide:title=All the folders...}$

Find all the folder of this lectures containing pillar files
[[[
FileSystem workingDirectory / 'Slides'
]]]

[[[
(FileSystem workingDirectory / 'Slides') inspect
]]]

${slide:title=All the folders...}$

[[[
(FileSystem workingDirectory / 'Slides') directories
]]]

[[[
(FileSystem workingDirectory / 'Slides') directories
	first children inspect
]]]

${slide:title=All the folders...}$

[[[
(FileSystem workingDirectory / 'Slides') directories
    select: [ :each | each children anySatisfy: [ :achil | achil extension = 'pillar']]
]]]

${slide:title=Summary}$

Looking for
- implementors
- senders
- direct references to classes