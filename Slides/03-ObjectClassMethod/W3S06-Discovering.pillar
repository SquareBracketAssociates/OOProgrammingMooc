{
  "title":"Learning how to discover information",
  "slidesid" : "W3S06"
}

${slide:title=Goals}$

- Patterns pro developers use daily
- Use the system itself to learn from it
- Applicable in any language 

${slide:title=Looking for implementors}$

What are the methods that may be executed in response to a message?
- Look for possible implementations
- You will get methods and may be one that you can call on (sub)-instances of the class implementing it.

${slide:title=Implementors in Pharo}$

- Select a message
- Command-m (for iMpleMentors)
+>file://Slides/figures/ImplementorsLowercase.png|width=80+

${slide:title=Looking for implementors (Spotter)}$

-  Shift-Enter hex #im (or #implementors)
- all methods whose selectors contains hex
+>file://Slides/figures/SpotterLowercase.png|width=90+

${slide:title=Looking for senders}$

- Look how a given message is used
-- receiver
-- arguments
- Always interesting to understand how typical arguments are passed
- May be useful to set a break point to see actual objects


${slide:title=Senders in Pharo}$
- Command-n (for seNders)

- There is no sender of ==lowercase==
- But 139 of ==asLowercase==
+>file://Slides/figures/asLowercaseSenders.png|width=80+

${slide:title=Looking for senders (Spotter)}$

- Shift-Enter asLowercase #se (or #senders)
+>file://Slides/figures/SpotterSendersAslowercase.png|width=90+

${slide:title=Looking for class references}$

- How to create instances?
- How a class is used?
-- class methods
-- default values

${slide:title=Class references in Pharo}$

- Command-N 

+>file://Slides/figures/PointClassReferences.png|width=75+

${slide:title=Class references (Spotter)}$

- Shift-Enter Point
+>file://Slides/figures/SpotterPoint.png|width=90+


${slide:title=Example: copyWithoutAll: implementors}$

+>file://Slides/figures/copyWithoutAllImplementors.png|width=90+

${slide:title=Example: copyWithoutAll: senders}$

+>file://Slides/figures/copyWithoutAllSenders.png|width=90+


${slide:title=Grabing instances and asking them}$

Too often we try to imagine objects
- Grab one as early as possible and 
- Send message to this object
- Inspect it, talk to it


${slide:title=All the folders that...}$

Find all the folder of this lectures containing pillar files

${slide:title=Let us start with the slides folder object}$
[[[
FileSystem workingDirectory / 'Slides'
]]]

[[[
(FileSystem workingDirectory / 'Slides') inspect
]]]

+>file://Slides/figures/inspectingFiles.png|width=90+

${slide:title=What are the subfolders}$

[[[
(FileSystem workingDirectory / 'Slides') directories
]]]

${slide:title=Navigate subfolders}$

[[[
(FileSystem workingDirectory / 'Slides') directories 
	first children first
]]]

[[[
(FileSystem workingDirectory / 'Slides') directories
	first children inspect
]]]

${slide:title=All the folders...}$

[[[
(FileSystem workingDirectory / 'Slides') directories
    select: [ :each | each children anySatisfy: [ :achil | achil extension = 'pillar']]
]]]

${slide:title=Summary}$

''A programmer becomes good not when he knows the syntax but when he knows
how to find information.''

- Look for
-- implementors
-- senders
-- direct references to classes
-- grab an object and talk to it