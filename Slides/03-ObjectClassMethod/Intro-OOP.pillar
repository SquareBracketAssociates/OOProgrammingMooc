{
    "title":"Essential OO Concepts",
    "subtitle":"",
    "author":"Stéphane Ducasse and Damien Cassou",
    "complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr damien.cassou@inria.fr"
}

${slide:title=Outline}$

- OOP
- Objects and classes

+ >file://figures/LogoPharo.png|width=30+

${slide:title=Object-Orientation}$

-Is a paradigm, not a technology
-Reflects, simulates the real world
-Thinks in terms of organization
-Tries to
--handle complexity
--enhance reusability
--minimize maintenance cost

${slide:title=Evolution}$

-Procedures
-Structured Programming
-Fourth Generation Languages
-Object-Oriented-Programming
-???

${slide:title=Traditional Point of View}$

-Focuses upon procedures
-Functionality is vested in procedures
-Data exists solely to be operated upon by procedures
-Procedures know about the structure of data
-Requires large number of procedures and procedure names

${slide:title=Data and Procedures}$

+>file://figures/DataAndProcedures.png|width=83+

${slide:title=What is OOP?}$

-An application is a collection of interacting entities (objects)
-Objects are characterized by behavior and state
-Inter-object behavior needs to be coordinated
-Inter-object communication is the key to coordination

${slide:title=Object-Oriented Viewpoint}$

-An application is a set of objects interacting by sending messages
-The functionality of an object is described by its methods, its data are stored in private variables
-An object’s functionality can be invoked by sending a message
-Everything is an object

${slide:title=State \+ Behavior \+ Identity}$

+>file://figures/StateBehaviorIdentity.jpg|width=80+

${slide:title=State \+ Behavior \+ Identity}$

;State
:Objects it contains or refers to (ex: point location)
;Behavior
:an object understands a given set of messages
;Identity
:an object can be the same (of the same class) than another one but it has still a different identity (location in memory)

${slide:title=Equality and Identity}$

I want to eat the pizza that you are eating
;Equality
:I want to eat the ""same"" kind of pizza
;Identity
:I eat your pizza

${slide:title=Data/Messages/Methods}$

+>file://figures/EncapsulationWithMessages.png|width=52+

${slide:title=What vs. How}$

;What: Messages
:Specify what behavior objects are to perform
:Details of how are left up to the receiver
:State information only accessed via messages
;How: Methods
:Specify how operation is to be performed
:Must have access to (contain or be passed) data
:Need detailed knowledge of data
:Can manipulate data directly

+>file://figures/EncapsulationWithMessages.png|width=30+

${slide:title=Message}$

-Sent to receiver object: receiver-object message
-A message may include parameters necessary for performing the action
-In Smalltalk, a message-send always returns a result (an object)
-Only way to communicate with an object and have it perform actions

+>file://figures/EncapsulationWithMessages-message.png|width=75+

${slide:title=Method}$

-Defines how to respond to a message
-Selected via method lookup technique
-Has name that is the same as message name
-Is a sequence of executable statements
-Returns an object as result of execution

+>file://figures/EncapsulationWithMessages-method.png|width=100+

${slide:title=Object Encapsulation}$

-Technique for
--Creating objects with encapsulated state/behaviour
--Hiding implementation details
--Protecting the state information of objects
--Communicating/accessing via a uniform interface
-Puts objects in control
-Facilitates modularity, code reuse and maintenance
--External perspective  vs. Internal perspective
--What vs. How
--Message vs. Method

${slide:title=Encapsulation at Work}$

+>file://figures/EncapsulationWithMessages-method.png|width=90+
+>file://figures/EncapsulationWithMessages-methodV2.png|width=90+

${slide:title=Objects}$

-Unique identify
-Private state
-Shared behavior among other similar objects
