{
	"title":"OOP: a different way to model the world"
}

${slide:title=Outline}$

- Object-oriented programming 
- Objects and classes

+ >file://figures/LogoPharo.png|width=30+


${slide:title=Programming is modelling}$

- There is not one single model of the world
- There are multiple ways to capture a model of the world

${slide:title=Object-Orientation}$

- Is a paradigm, not a technology
- Reflects, simulates the real world
- Thinks in terms of organization
- Tries to
-- handle complexity
-- enhance reusability
-- minimize maintenance cost

${slide:title=Evolution}$

- Procedures
- Structured Programming
- Fourth Generation Languages
- Object-Oriented-Programming
- (Aspect-Oriented Programming) is more a variation of OOP

${slide:title=Traditional Point of View}$

- Focuses upon procedures
- Functionality is vested in procedures
- Data exists solely to be operated upon by procedures
- Procedures know about the structure of data
- Requires large number of procedures and procedure names

${slide:title=Data and Procedures}$

+>file://figures/DataAndProcedures.png|width=83+

${slide:title=Let us compare}$

Problem: compute the total area of a set of geometric shapes

[[[
myPicture := Picture new.
myPicture add: (Square x: 3 y: 3 width: 3).
myPicture add: (Rectangle x: 5 y: with:5 height: 3)
myPicture add: (Circle x: 12 y: 3 radius: 3).

myPicture area
]]]

${slide:title=Produral way: centralize way (in Java)}$

[[[
double area() {
	double total = 0;
	    for (Shape shape : shapes) {
	       switch (shape.kind()) {
	       case SQUARE:
	           Square square = (Square) shape;
	           total += square.width * square.width; break;
	       case RECTANGLE:
	           Rectangle rectangle = (Rectangle) shape;
	           total += rectangle.width * rectangle.height; break;
	       case CIRCLE:
	           Circle circle = (Circle) shape;
	           total += java.lang.Math.PI * circle.radius * circle.radius / 2; break; 
			   } }
	    return total; }
]]]

${slide:title=Produral way: centralize way (in Java)}$

[[[
Picture >> area 
	| total |
	total := 0.
	self shapes do [:aShape |
	   aShape kind == #SQUARE
	   		 ifTrue: [ total := total + aShape width * aShape width ]
	        ifFalse: [
				aShape kind == #RECTANGLE
	           	ifTrue: [
						total := aShape width * aShape height ]
					ifFalse: [
	       		 	total := total + (Float pi * shape radius squared / 2) ]
   ^ total 
]]]

${slide:title=OO way}$

[[[
Picture >> area 
	| total |
	total := 0.
	self shapes do [:aShape |
	   total := total + aShape area ].
	^ total	
]]]

[[[
Square >> area
 ^ aShape width * aShape width

Rectangle >> area
	^ aShape width * aShape height 

Circle >> area
 ^  (Float pi * shape radius squared / 2)
]]]

${slide:title=What is OOP?}$

- An application is a collection of interacting entities (objects)
- Objects are characterized by behavior and state
- Inter-object behavior needs to be coordinated
- Inter-object communication is the key to coordination

${slide:title=What is OOP?: Encapsulation/Composition}$

- ""Encapsulation"" 
Hide and control the internal representation of an object. This will ease further evolution. 

- ""Composition"" 
An object can be composed of several simpler other objects. 

${slide:title=What is OOP?: Message passing}$

- ""Distribution of responsibility and delegation"" 
Computing a problem is the results of many objects performing (sub) tasks.

- ""Late binding and message passing"" 
The receiver of a message determines which method will be executed on it. 
-- what? the message 
-- how? the method 

- ""Inheritance"" 
We define abstractions as conceptual hierarchies and reuse implementation in subclasses 

- ""Polymorphism"" 
Objects exhibiting the same interface can be substitued and class hierarchy defines families of polymorphic objects

%${slide:title=Vocabulary point}$
%- Encapsulation means that related entities are bundled together, for example, a Shape object encapsulates data and related operations for shapes.
%- Abstraction means that we ignore irrelevant details, for example, we abstract from the details of a Shape object and just use its interface (i.e., its operations).
%- Information hiding means that we hide (forbid access to) the representation behind an abstraction, for example, you may not directly access the state of a Shape but must access it only through its interface.




${slide:title=Object-Oriented Viewpoint}$

- An application is a set of objects interacting by sending messages
- The functionality of an object is described by its methods, its data are stored in private variables
- An objectâ€™s functionality can be invoked by sending a message
- Everything is an object


${slide:title=Responsibility-Driven Design}$

- Objects are responsible to maintain information and provide services
- A good design exhibits:
-- high cohesion of operations and data within classes 
-- low coupling between classes and subsystems
Every method should perform one, well-defined task:
-- High level of abstraction
-- Write to an interface, not an implementation



${slide:title=Objects}$

-Unique identify
-Private state
