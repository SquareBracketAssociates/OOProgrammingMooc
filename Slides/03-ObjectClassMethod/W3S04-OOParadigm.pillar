{
	"title":"A different way to model the world",
	 "slidesid":"W3S04"
}

${slide:title=Model of a the World}$

- There is not one single model of the world
- There are multiple ways to capture a model of the world
-- Data driven (often used with relational database)
-- Object-Oriented Design
-- Functional modeling
-- Reactive programming
- A program models the world

${slide:title=Object-Orientation}$

- Is a paradigm, not a technology
- Reflects, simulates the real world
- Thinks in terms of decentralized organizations
- Tries to
-- handle complexity
-- enhance reusability
-- minimize maintenance cost

${slide:title=Stepping back: Studying history}$

- Procedures
- Structured Programming
- Fourth Generation Languages
- Object-Oriented-Programming
- (Aspect-Oriented Programming) is more a variation of OOP

${slide:title=Structured/Procedural Programming Point of View}$

- Focuses upon structures and procedures
- Data is shared between procedures
- Data accessible from procedures (and client procedures too)
- Procedures know about the structure of data

${slide:title=Structured/Procedural Programming Point of View}$

- No late binding (can be simulated with pointer tables)
- Requires large number of procedures and procedure names
- Single namespace for procedures
- No decoupling between messages and methods: just procedures accessing data

${slide:title=Let us Compare}$

Problem: compute the total area of a set of geometric shapes

[[[
myPicture := Picture new.
myPicture add: (Square x: 3 y: 3 width: 3).
myPicture add: (Rectangle x: 5 y: with:5 height: 3)
myPicture add: (Circle x: 12 y: 3 radius: 3).

myPicture area
]]]

${slide:title=Procedural way: centralize way (in Java)}$

[[[
double area() {
	double total = 0;
	    for (Shape shape : shapes) {
	       switch (shape.kind()) {
	       case SQUARE:
	           Square square = (Square) shape;
	           total += square.width * square.width; break;
	       case RECTANGLE:
	           Rectangle rectangle = (Rectangle) shape;
	           total += rectangle.width * rectangle.height; break;
	       case CIRCLE:
	           Circle circle = (Circle) shape;
	           total += java.lang.Math.PI * circle.radius * circle.radius / 2; break; 
			   } }
	    return total; }
]]]

${slide:title=Procedural way: a centralized way}$

[[[
Picture >> area 
	| total |
	total := 0.
	self shapes do [ :aShape |
	   aShape kind == #SQUARE
	   		 ifTrue: [ total := total + aShape width * aShape width ]
	        ifFalse: [
				aShape kind == #RECTANGLE
	           	ifTrue: [
						total := aShape width * aShape height ]
					ifFalse: [
	       		 	total := total + (Float pi * shape radius squared / 2) ]
   ^ total
]]]

${slide:title=Procedural way: Drawbacks}$

- All the logic is defined in a single place
-- monolithic 
- What if we want to add a new shape?
-- need to recompile the ==area== procedure
-- need to check for the new shape

${slide:title=The OO way: delegate to other entities}$

[[[
Picture >> area 
	| total |
	total := 0.
	self shapes do [ :aShape |
	   total := total + aShape area ].
	^ total	
]]]

[[[
Square >> area
 ^ self side squared
]]]

[[[
Rectangle >> area
	^ self width * self height
]]]

[[[
Circle >> area
 ^  (Float pi * self radius squared / 2)
]]]

${slide:title=OOP Advantages}$

- Adding a new shape 
-- add a class with the ==area== message
-- create objects of this class

- Decentralised view of computation

- Each shape class represents its data/logic internally

${slide:title=What is OOP?}$

- An application or system is a collection of interacting entities (objects).
- Objects are characterized by behavior and state.
- Inter-object communication is done via messages.
- Message passing late bound the selection of the method to be executed.

${slide:title=Object-Oriented Viewpoint}$

- An application is a set of objects interacting by sending messages
- The functionality of an object is described by its methods, its data are stored in private variables
- An objectâ€™s functionality can be invoked by sending a message
- Ideally everything is an object

${slide:title=Objects}$

- Unique identity
- Private state
- Methods to perform computation
- React to message by selecting method to be executed
- Polymorphic interface to be able to be substitued for other objects

${slide:title=A class is a Factory of Objects}$

A class describes the structure and the behavior of its instances
- Each instances has its own value
- All instances of class share the same behavior

+>file://Slides/figures/RectangleAndInstances.pdf|width=40+


${slide:title=Responsibility-Driven Design}$

- Objects are responsible to maintain information and provide services
- An object should have one main responsibility
- A good design exhibits:
-- high cohesion of operations and data within classes 
-- low coupling between classes and subsystems

${slide:title=Method at Right Level of Abstraction}$

Every method should perform one, well-defined task:
- High level of abstraction
- Write to an interface, not an implementation 
-- Avoid hardcoding class references
-- Provide/use polymorphic API 


${slide:title=OOP Cornerstone: Encapsulation/Composition}$

""Encapsulation"" 
- Hide and control the internal representation of an object. This will ease further evolution
- Clients do not access object internals

""Composition"" 
- An object can be composed of several simpler other objects

${slide:title=OOP Cornerstone: Distribution of responsibility}$

""Distribution of responsibility and delegation"" 
- Computing a problem is the results of many objects performing (sub) tasks.

${slide:title=OOP Cornerstone: Late binding}$
""Late binding and message passing"" 
- The receiver of a message determines which method will be executed on it. 
-- What to perform? the message 
-- How to perform? the method 

${slide:title=OOP Cornerstone: Polymorphism}$
""Polymorphism"" 
- Objects exhibiting the same interface can be substitued
- Class hierarchy defines families of ""polymorphic"" (kind of substituable) objects

${slide:title=OOP Cornerstone: Reuse via abstraction extension}$

""Inheritance"" structures abstractions as conceptual hierarchies
- ==OrderedCollection== is a kind of ==Collection==
- ==Array== is a kind of ==Collection==
""Inheritance"" supports reuse and extensions in subclasses



%${slide:title=Vocabulary point}$
%- Encapsulation means that related entities are bundled together, for example, a Shape object encapsulates data and related operations for shapes.
%- Abstraction means that we ignore irrelevant details, for example, we abstract from the details of a Shape object and just use its interface (i.e., its operations).
%- Information hiding means that we hide (forbid access to) the representation behind an abstraction, for example, you may not directly access the state of a Shape but must access it only through its interface.





${slide:title=What you should know}$

- OOP describes programs as collaborating entities
- Objects encapsulate data and expose API of behavior
- Late binding selects the method to be executed in reaction to a message
- Classes reuse (extend, modify their superclass behavior)
- Good design promote polyrmorphism