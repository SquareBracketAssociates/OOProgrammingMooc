{
  "title":"Avoid Null Checks",
  "slidesid":"W7S07",
  "pharomoocslidesis":"Pharo mooc W7S07"
}

${slide:title=What You Will Learn}$

- AntiIf Campaign
- If you do not want to be forced to test nil, do not generate nil
- NullObject Design Pattern

${slide:title=Anti If Campaign}$

[[[
Main >> showHappiness: animal
    animal isDog
       ifTrue: [ animal shakeTail ].
    animal isDuck
       ifTrue: [ animal quack ].
    animal isCat ifTrue: [ ... ].
]]]

Branching (with ==if==) based on the type of an object is bad:
- adding a new type requires modifying all such code
- methods will become very long and full of details

Instead, send messages!

+.>file://figures/antifIfCampaign.png|width=30+

${slide:title=Anti If Campaign}$

[[[
Dog >> showHappiness
    self shakeTail
]]]
[[[
Duck >> showHappiness
    self quack
]]]
[[[
Cat >> showHappiness
   ...
]]]


${slide:title=nil or anObject?}$

When you get a variable that can be nil or anObject
- Forced to check before doing anything
- Every access should be controlled

${slide:title=How to Avoid nil?}$

- Initialize well your objects (see Lectures Instance Initialization)
- When possible, do not return nil!
- When possible, apply NullObject Design Pattern

${slide:title=Example: Do Not Return Nil}$

[[[
Inferencer >> rulesForFact: aFact
     self noRule ifTrue: [ ^ nil ]
     ^ self rulesAppliedTo: aFact
]]]

==ifTrue: [ ^ nil ]== forces every client to check for ==nil==!

[[[
(inferencer rulesForFact: 'a')
     ifNotNil: [ :rules |
        rules do: [ :each | ... ]
]]]

${slide:title=Return Polymorphic Objects}$

When possible, replace ==if== by polymorphic objects:
- when returning a collection, return an empty one
- when returning a number, return 0

${slide:title=Example: Return Polymorphic an Empty Collection}$

[[[
Inferencer >> rulesForFact: aFact
     self noRule ifTrue: [ ^ #() ]
     ^ self rulesAppliedTo: aFact
]]]

Advantages:
- Your clients can just iterate and manipulate the returned value
- No check needed

[[[
(inferencer rulesForFact: 'a')
   do: [:each | ... ]
]]]

${slide:title=For Exceptional Cases, Use Exceptions}$

For exceptional cases, replace ==nil== by exceptions:
- avoid error codes because they require ==if== in clients
- exceptions may be handled by the client, or the client's client, or ...

[[[
FileStream >> nextPutAll: aByteArray
   canWrite ifFalse: [ self cantWriteError ].
   ...
]]]

[[[
FileStream >> cantWriteError
   (CantWriteError file: file) signal
]]]

[[[
Client >> handle...
   [ ... ] on: CantWriteError do: [:ex | ...handle exceptional case... ]
]]]


${slide:title=Initialize Your Object State}$

Avoid ==nil== checks by initializing your variables
- by default instance variables are initialized with ==nil==

[[[
Archive >> initialize
   super initialize.
   members := OrderedCollection new
]]]

See Lecture Initialize Instances

${slide:title=Use Lazy Initialization when Necessary}$

You can defer initialization of a variable to its first use:

[[[
FreeTypeFont >> descent
   ^ cachedDescent ifNil: [
        cachedDescent := (self face descender * self pixelSize //
                               self face unitsPerEm) negated ]
]]]

Be careful to systematically use the lazy accessor and not direct access


${slide:title=Sometimes you have to check...}$

- Sometimes you have to check before doing an action
- Solution: if you can, turn the default case into an object (null object)


${slide:title=Example}$

[[[
SelectionTool >> attachHandles
    ^ ... something complex...
]]]
[[[
SelectionTool >> detachHandles
    ^ ... something complex...
]]]

If tool can be nil, clients have to check! 

[[[
ToolPalette >> nextAction
    self selectedTool
       ifNotNil: [ :tool | tool attachHandles ]
]]]
  
[[[
ToolPalette >> previousAction
   self selectedTool
      ifNotNil: [ :tool | tool detachHandles ]
]]]

${slide:title=Use NullObject}$

[[[
NoTool >> attachHandles
     ^ self
]]]
[[[
NoTool >> detachHandles
     ^ self
]]]

The NullTool does nothing but offers a compatible API!


${slide:title=Use NullObject}$

+.>file://figures/NullObject.pdf|width=60+

- a null object proposes a polymorphic API and embeds default actions/values
- Woolf, Bobby (1998). "Null Object". In Pattern Languages of Program Design 3. Addison-Wesley.


${slide:title=Clients do not have to check anymore}$
[[[
ToolPalette >> initialize
     self selectedTool: NoTool new
]]]

[[[
ToolPalette >> nextAction
     self selectedTool attachHandles
]]]
[[[
ToolPalette >> previousAction
    self selectedTool detachHandles
]]] 


${slide:title=Conclusion}$

- A message acts as a better ==if==
- Avoid null checks, return polymorphic objects instead
- Initialize your variables
- If you can, create objects representing default behavior

+.>file://figures/antifIfCampaign.png|width=40+


${slide:title=Resources}$
- Pharo mooc - Videos W7S07: *http://mooc.pharo.org* 

